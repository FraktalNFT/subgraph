# TODO:
# Add ERC1155 template, make sure transfers change owner
# Add admin schema, keep track of fee and contract templates
specVersion: 0.0.2
schema:
  file: ./schema.graphql
dataSources:
  - kind: ethereum/contract
    name: FraktalMarket
    network: rinkeby
    source:
      address: "0x392EC06440a8107fA417fBA89DacE8ce005Ed318"
      # address: "0x1421ba6B13955102F0EB92fcB819e97bc1D00578"
      # address: "0x2EaA5E7A501eFA561B775aEE95eeF6a113bDd0e4"  w/ auction 
      #0xD71CB14bB50C39D090083C6c3be934AF2b435fEB current 
      # address: "0xE592641ddA55049dF27b6738D12cA977e68b3bB5" #Proxy
        # "0xc992FCC35b943842Ee4d1ab73a35aEc27E5ca851" > "0x2b063393585e5B9A507568D25b42280aE926aD13"
      abi: FraktalMarket
      startBlock: 10138586
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.6
      language: wasm/assemblyscript
      entities:
        - Bought
        - FeeUpdated
        - ItemListed
        - ItemPriceUpdated
        - FraktalClaimed
        - SellerPaymentPull
        - AdminWithdrawFees
        - OfferMade
        - OfferVoted
        - AuctionContribute
        - AuctionItemListed
        - FeeUpdated
        - FraktalClaimed
        - OwnershipTransferred
        - SellerPaymentPull
      abis:
        - name: FraktalMarket
          file: ./abis/FraktalMarket.json
    # event Bought(address buyer,address seller, address tokenAddress, uint256 numberOfShares);
    # event FeeUpdated(uint16 newFee);
    # event ItemListed(address owner, address tokenAddress, uint256 price, uint256 amountOfShares);
    # event ItemPriceUpdated(address owner, address tokenAddress, uint256 newPrice);
    # event FraktalClaimed(address owner, address tokenAddress);
    # event SellerPaymentPull(address seller, uint256 balance);
    # event AdminWithdrawFees(uint256 feesAccrued);
    # event OfferMade(address offerer, address tokenAddress, uint256 value);
      eventHandlers:
        # - event: FeeUpdated(uint16)
        #   handler: handleFeeUpdated
        # - event: AdminWithdrawFees(uint256)
        #   handler: handleAdminWithdrawFees
        - event: Bought(address,address,address,uint256)
          handler: handleBought
        - event: ItemListed(address,address,uint256,uint256)
          handler: handleItemListed
        - event: FraktalClaimed(address,address)
          handler: handleFraktalClaimed
        - event: SellerPaymentPull(address,uint256)
          handler: handleSellerPaymentPull
        - event: OfferMade(address,address,uint256)
          handler: handleOfferMade
        - event: OfferVoted(address,address,address,bool)
          handler: handleOfferVoted
        - event: AuctionContribute(address,address,address,uint256,uint256)
          handler: handleAuctionContribute
        - event: AuctionItemListed(address,address,uint256,uint256,uint256,uint256)
          handler: handleAuctionItemListed
        - event: FeeUpdated(uint16)
          handler: handleFeeUpdated
        - event: OwnershipTransferred(indexed address,indexed address)
          handler: handleOwnershipTransferred
      file: ./src/market.ts
  - kind: ethereum/contract
    name: FraktalFactory
    network: rinkeby
    source:
      address: "0x0dED49EF05204386dE234055Cf628e57fCcf40a8"
      # address: "0xd8646eA0064538EC100881893d98537f611C53bC" new with decimals
      # address: "0xA64E2EF06B06FFd77Abec0FCb375Fb368ABEF06e" oldv2
      # address: "0x7edb6a54D10B4e3039Fd11D1A59582a6294a6ffE" old
      # refer https://github.com/FraktalNFT/dapp-frontend/blob/main/utils/constants.ts
      abi: FraktalFactory
      startBlock: 10138586 
      # startBlock: 9414170
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.6
      language: wasm/assemblyscript
      entities:
        - Minted
        - ERC721Locked
        - ERC721UnLocked
        - ERC1155Locked
        - ERC1155UnLocked
        - RevenuesProtocolUpgraded
        - FraktalProtocolUpgraded
      abis:
        - name: FraktalFactory
          file: ./abis/FraktalFactory.json
    # event Minted(address creator,string urlIpfs,address tokenAddress,uint256 nftId);
    # event ERC721Locked(address locker, address tokenAddress, address fraktal, uint256 tokenId);
    # event ERC721UnLocked(address owner, uint256 tokenId, address collateralNft, uint256 index);
    # event ERC1155Locked(address locker, address tokenAddress, address fraktal, uint256 tokenId);
    # event ERC1155UnLocked(address owner, address tokenAddress, address collateralNft, uint256 index);
    # event RevenuesProtocolUpgraded(address _newAddress);
    # event FraktalProtocolUpgraded(address _newAddress);
      eventHandlers:
        - event: Minted(address,string,address,uint256)
          handler: handleMinted
        - event: ERC721Locked(address,address,address,uint256)
          handler: handleERC721Locked
        - event: ERC721UnLocked(address,uint256,address,uint256)
          handler: handleERC721UnLocked
        - event: ERC1155Locked(address,address,address,uint256)
          handler: handleERC1155Locked
        - event: ERC1155UnLocked(address,address,address,uint256)
          handler: handleERC1155UnLocked
        # - event: RevenuesProtocolUpgraded(address)
        #   handler: handleRevenuesProtocolUpgraded
        # - event: FraktalProtocolUpgraded(address)
        #   handler: handleFraktalProtocolUpgraded
      file: ./src/factory.ts

templates:
  - kind: ethereum/contract
    name: FraktalNFT
    network: rinkeby
    source:
      abi: FraktalNFT
    mapping:
      file: ./src/fraktal.ts
      kind: ethereum/events
      apiVersion: 0.0.6
      language: wasm/assemblyscript
      abis:
        - name: FraktalNFT
          file: ./abis/FraktalNFT.json
      entities:
        - LockedSharesForTransfer
        - unLockedSharesForTransfer
        - ItemSold
        - NewRevenueAdded
        - Fraktionalized
        - MajorityValueChanged
        - TransferSingle
        - Defraktionalized
    # event LockedSharesForTransfer(address shareOwner, address to, uint numShares);
    # event unLockedSharesForTransfer(address shareOwner, address to, uint numShares);
    # event ItemSold(address buyer, uint256 indexUsed);
    # event NewRevenueAdded(address payer, address revenueChannel, uint256 amount, bool sold);
    # event Fraktionalized(address holder, address minter, uint256 index);
    # event Defraktionalized(address holder, uint256 index);

    # event MajorityValueChanged(uint16 newValue);
      eventHandlers:
        - event: LockedSharesForTransfer(address,address,uint256)
          handler: handleLockedSharesForTransfer
        - event: unLockedSharesForTransfer(address,address,uint256)
          handler: handleunLockedSharesForTransfer
        - event: ItemSold(address,uint256)
          handler: handleItemSold
        - event: NewRevenueAdded(address,address,uint256,bool)
          handler: handleNewRevenueAdded
        - event: Fraktionalized(address,address,uint256)
          handler: handleFraktionalized
        - event: Defraktionalized(address,uint256)
          handler: handleDefraktionalized
        - event: TransferSingle(indexed address,indexed address,indexed address,uint256,uint256)
          handler: handleTransferSingle
        # - event: MajorityValueChanged(uint16)
        #   handler: handleMajorityValueChanged

  - kind: ethereum/contract
    name: PaymentSplitterUpgradeable
    network: rinkeby
    source:
      abi: PaymentSplitterUpgradeable
    mapping:
      file: ./src/revenues.ts
      kind: ethereum/events
      apiVersion: 0.0.6
      language: wasm/assemblyscript
      abis:
        - name: PaymentSplitterUpgradeable
          file: ./abis/PaymentSplitterUpgradeable.json
      entities:
        - PayeeAdded
        - PaymentReleased
        - PaymentReceived
    # event PayeeAdded(address account, uint256 shares);
    # event PaymentReleased(address to, uint256 amount);
    # event PaymentReceived(address from, uint256 amount);
      eventHandlers:
        # - event: PayeeAdded(address,uint256)
        #   handler: handlePayeeAdded
        - event: PaymentReleased(address,uint256)
          handler: handlePaymentReleased
        - event: PaymentReceived(address,uint256)
          handler: handlePaymentReceived
